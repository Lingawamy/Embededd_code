/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
void delay(void)
{
for(uint32_t i=0;i<30000;i++);
}
extern void initialise_monitor_handles(void);
int main(void)
{

	     initialise_monitor_handles();
		uint32_t volatile *const pClk_ctrl_reg               =(uint32_t*)(0x40023800+0x30);
		uint32_t volatile *const pGPIOA_mode_reg              =(uint32_t*)(0x40020000+0x00);
		uint32_t volatile *const pGPIOB_mode_reg              =(uint32_t*)(0x40020400+0x00);
		uint32_t volatile *const pGPIOC_mode_reg              =(uint32_t*)(0x40020800+0x00);
		uint32_t volatile *const pPortA_in_data_reg           =(uint32_t*)(0x40020000+0x10);
		uint32_t volatile *const pPortB_in_data_reg           =(uint32_t*)(0x40020400+0x10);
		uint32_t volatile *const pPortC_in_data_reg           =(uint32_t*)(0x40020800+0x10);
		uint32_t volatile *const pPortA_out_data_reg          =(uint32_t*)(0x40020000+0x14);
		uint32_t volatile *const pPortB_out_data_reg          =(uint32_t*)(0x40020400+0x14);
		uint32_t volatile *const pPortC_out_data_reg          =(uint32_t*)(0x40020800+0x14);
		uint32_t volatile *const pPullupDownA_reg             =(uint32_t*)(0x40020000+0x0c);
		uint32_t volatile *const pPullupDownB_reg             =(uint32_t*)(0x40020400+0x0c);
		uint32_t volatile *const pPullupDownC_reg             =(uint32_t*)(0x40020800+0x0c);



		//1.enble the gpio periperal clock
		 *pClk_ctrl_reg   =*pClk_ctrl_reg | (0x1<<0); //portA clock enble
		 *pClk_ctrl_reg   =*pClk_ctrl_reg | (0x1<<1); //portB clock enble
		 *pClk_ctrl_reg   =*pClk_ctrl_reg | (0x1<<2); //portC clock enble

		 //2.configure output_mode PA10,PB3,PB5,PB4
		 *pGPIOA_mode_reg =(*pGPIOA_mode_reg & (~ (0x03<<20)));//clear the pA10;
		 *pGPIOA_mode_reg =(*pGPIOA_mode_reg | (0x01<<20));//set the pA10;

		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg & (~ (0x03<<6)));//clear the pB3;
		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg | (0x01<<6));//set the  pB3;

		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg & (~ (0x03<<10)));//clear the pB5;
		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg | (0x01<<10));//set the pB5;

		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg & (~ (0x03<<8)));//clear the pB4;
		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg | (0x01<<8));//set the pB4;

		 //3.configure input_mode PB10,PA8,PA9,PC7

		 *pGPIOB_mode_reg =(*pGPIOB_mode_reg & (~ (0x03<<20)));//clear input mode the pB10;
		 *pGPIOA_mode_reg =(*pGPIOA_mode_reg & (~ (0x03<<16)));//clear input mode the pA8;
		 *pGPIOA_mode_reg =(*pGPIOA_mode_reg & (~ (0x03<<18)));//clear input mode the pA9;
		 *pGPIOC_mode_reg =(*pGPIOC_mode_reg & (~ (0x03<<14)));//clear input mode the pC7;

		 //4.Enble internel pull_up register for PB10,PA8,PA9,PC7

		 *pPullupDownB_reg =(*pPullupDownB_reg & (~(0x03<<20)) );// clear the bit field of pB10 for pullup;
		 *pPullupDownB_reg =(*pPullupDownB_reg | (0x01<<20) );//set pull_up register pB10;

		 *pPullupDownA_reg =(*pPullupDownA_reg & (~(0x03<<16)) );// clear the bit field of pA8 for pullup;
		 *pPullupDownA_reg =(*pPullupDownA_reg | (0x01<<16) );//set pull_up register pA8;

		 *pPullupDownA_reg =(*pPullupDownA_reg & (~(0x03<<18)) );// clear the bit field of pA9 for pullup;
		 *pPullupDownA_reg =(*pPullupDownA_reg | (0x01<<18) );//set pull_up register pA9;

		 *pPullupDownC_reg =(*pPullupDownC_reg & (~(0x03<<16)) );// clear the bit field of pc7 for pullup;
		 *pPullupDownC_reg =(*pPullupDownC_reg | (0x01<<16) );//set pull_up register pc7;
while(1)
{
		 //make all row HIGH
		 *pPortA_out_data_reg = (*pPortA_out_data_reg | (0x01<<10));//PA10
		 *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<3));//PB3
		 *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<5));//PB5
		 *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<4));//PB4

		 //make R1 is low
		 *pPortA_out_data_reg = (*pPortA_out_data_reg | ((~0x01<<10)));//PA10
		 //scan the colms
		 //check C1(PB10) low or high
		 if( !(*pPortB_in_data_reg & (0x01<<10)))
		 {
			 //key is pressed
			 delay();
			 printf("1\n");
		 }

		 //check C2(PA8) low or high
		 if( !(*pPortA_in_data_reg & (0x01<<8)))
		 {
		     //key is pressed
		     delay();
		 	 printf("2\n");
		 }
		 //check C3(PA9) low or high
		 if( !(*pPortA_in_data_reg & (0x01<<9)))
		 {
			 //key is pressed
		 	delay();
		 	printf("3\n");
		 }

		 //check C4(PC7) low or high
		 if( !(*pPortC_in_data_reg & (0x01<<7)))
		 {
		 	 //key is pressed
		 	delay();
		    printf("A\n");
		 }

		 //make all row HIGH
		  *pPortA_out_data_reg = (*pPortA_out_data_reg | (0x01<<8));//PA10
		  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<3));//PB3
		  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<5));//PB5
		  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<4));//PB4

		  //make R2 is low
		  *pPortB_out_data_reg = (*pPortB_out_data_reg | ((~0x01<<3)));//PB3

		  //scan the colums
		  //check C1(PB10) low or high
		  		 if( !(*pPortB_in_data_reg & (0x01<<10)))
		  		 {
		  			 //key is pressed
		  			 delay();
		  			 printf("4\n");
		  		 }

		  		 //check C2(PA8) low or high
		  		 if( !(*pPortA_in_data_reg & (0x01<<8)))
		  		 {
		  		     //key is pressed
		  		     delay();
		  		 	 printf("5\n");
		  		 }
		  		 //check C3(PA9) low or high
		  		 if( !(*pPortA_in_data_reg & (0x01<<9)))
		  		 {
		  			 //key is pressed
		  		 	delay();
		  		 	printf("6\n");
		  		 }

		  		 //check C4(PC7) low or high
		  		 if( !(*pPortC_in_data_reg & (0x01<<7)))
		  		 {
		  		 	 //key is pressed
		  		 	delay();
		  		    printf("B\n");
		  		 }

		  		          //make all row HIGH
		  				  *pPortA_out_data_reg = (*pPortA_out_data_reg | (0x01<<8));//PA10
		  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<3));//PB3
		  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<5));//PB5
		  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<4));//PB4

		  				  //make R3 is low
		  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | ((~0x01<<5)));//PB5

		  				  //scan the colums
		  				  //check C1(PB10) low or high
		  				  		 if( !(*pPortB_in_data_reg & (0x01<<10)))
		  				  		 {
		  				  			 //key is pressed
		  				  			 delay();
		  				  			 printf("7\n");
		  				  		 }

		  				  		 //check C2(PA8) low or high
		  				  		 if( !(*pPortA_in_data_reg & (0x01<<8)))
		  				  		 {
		  				  		     //key is pressed
		  				  		     delay();
		  				  		 	 printf("8\n");
		  				  		 }
		  				  		 //check C3(PA9) low or high
		  				  		 if( !(*pPortA_in_data_reg & (0x01<<9)))
		  				  		 {
		  				  			 //key is pressed
		  				  		 	delay();
		  				  		 	printf("9\n");
		  				  		 }

		  				  		 //check C4(PC7) low or high
		  				  		 if( !(*pPortC_in_data_reg & (0x01<<7)))
		  				  		 {
		  				  		 	 //key is pressed
		  				  		 	delay();
		  				  		    printf("C\n");
		  				  		 }

		  				  		          //make all row HIGH
		  				  				  *pPortA_out_data_reg = (*pPortA_out_data_reg | (0x01<<8));//PA10
		  				  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<3));//PB3
		  				  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<5));//PB5
		  				  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | (0x01<<4));//PB4

		  				  				  //make R4 is low
		  				  				  *pPortB_out_data_reg = (*pPortB_out_data_reg | ((~0x01<<4)));//PB4

		  				  				  //scan the colums
		  				  				  //check C1(PB10) low or high
		  				  				  		 if( !(*pPortB_in_data_reg & (0x01<<10)))
		  				  				  		 {
		  				  				  			 //key is pressed
		  				  				  			 delay();
		  				  				  			 printf("*\n");
		  				  				  		 }

		  				  				  		 //check C2(PA8) low or high
		  				  				  		 if( !(*pPortA_in_data_reg & (0x01<<8)))
		  				  				  		 {
		  				  				  		     //key is pressed
		  				  				  		     delay();
		  				  				  		 	 printf("0\n");
		  				  				  		 }
		  				  				  		 //check C3(PA9) low or high
		  				  				  		 if( !(*pPortA_in_data_reg & (0x01<<9)))
		  				  				  		 {
		  				  				  			 //key is pressed
		  				  				  		 	delay();
		  				  				  		 	printf("#\n");
		  				  				  		 }

		  				  				  		 //check C4(PC7) low or high
		  				  				  		 if( !(*pPortC_in_data_reg & (0x01<<7)))
		  				  				  		 {
		  				  				  		 	 //key is pressed
		  				  				  		 	delay();
		  				  				  		    printf("D\n");
		  				  				  		 }

}//while end

    /* Loop forever */
	//for(;;);
}
